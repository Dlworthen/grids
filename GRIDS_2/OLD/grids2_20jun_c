#DECK cdf.F90
module cdf

  implicit none

  integer, parameter :: ndim1 = 1, ndim2 = 2, ndim3 = 3, ndim4 = 4

  integer, dimension(ndim1) :: dim1, corner1, edge1
  integer, dimension(ndim2) :: dim2, corner2, edge2
  integer, dimension(ndim3) :: dim3, corner3, edge3
  integer, dimension(ndim4) :: dim4, corner4, edge4

  real(kind=8) :: mval = -9999.

  integer :: rc,ncid
  integer :: xdim, ydim, ymdim, datid

end module cdf
#DECK charstrings.F90
module charstrings

  implicit none

  !character(len=20) :: dirout = '/data1/GRIDS/'
  character(len=20) :: dirout = '/data1/TEST/'
  character(len= 8) :: csrc = '.nc     '

#ifdef hycom_024
  character(len=60) :: dirsrc = '/data1/GRIDS/DATA/input_024/'
  character(len=60) :: ocngridcdf = 'hycom_grid_024'
  character(len=60) :: icegridcdf =  'cice_grid_024'
#endif
#ifdef hycom_008
  character(len=60) :: dirsrc = '/data1/GRIDS/DATA/input_008/'
  character(len=60) :: ocngridcdf = 'hycom_grid_008'
  character(len=60) :: icegridcdf =  'cice_grid_008'
#endif
#ifdef hycom_072
  character(len=60) :: dirsrc = '/data1/GRIDS/DATA/input_072/'
  character(len=60) :: ocngridcdf = 'hycom_grid_072'
  character(len=60) :: icegridcdf =  'cice_grid_072'
#endif
end module charstrings
#DECK data.F90
module data

 use param

 implicit none

  integer(kind=4), dimension(ihycom,jhycom) :: land
  ! masks on p grid
  integer(kind=4), dimension(ihycom,jhycom) :: ip
  ! masks on other grids
  integer(kind=4), dimension(ihycom,jhycom) :: iq
  integer(kind=4), dimension(ihycom,jhycom) :: iu
  integer(kind=4), dimension(ihycom,jhycom) :: iv

     real(kind=4), dimension(ihycom,jhycom) :: depths

     real(kind=4), dimension(ihycom,jhycom) :: plon, plat, &
                                               qlon, qlat, &
                                               ulon, ulat, &
                                               vlon, vlat, &
                                               pscx, pscy, &
                                               qscx, qscy, &
                                               uscx, uscy, &
                                               vscx, vscy, &
                                               pang, cori

end module data
#DECK grid2cice.F90
      subroutine grid2cice(i1st_in,j1st_in,imt_in,jmt_in)

      use mod_cice  ! HYCOM cice array interface
      use mod_za    ! HYCOM array I/O interface
      use charstrings
      use data
!c
      implicit none

      integer, intent(in) :: i1st_in,j1st_in,imt_in,jmt_in
!c
!c --- extract a subdomain of a HYCOM grid and bathymetry for NCOM
!c --- read  HYCOM regional.grid and regional.depth.
!c --- write CICE  regional.cice
!c
!c --- this version for standard regions.
!c
      integer          i,i0,i1st,ip1,j,j0,j1st,jp1,nrecl
      real             xmin,xmax,qij
      real*8           deg2rad,rad2deg
!c

      call xcspmd
      ! main routine calls it
      !call zaiost
      lp=6
!c
!c --- 'i1st  ' = 1st hycom i-point on cice grid
!c --- 'j1st  ' = 1st hycom j-point on cice grid
!c
!c --- cice(1,1) is co-located with hycom(i1st,j1st), but note
!c --- that for non-periodic cases cice will have land at 1,1
!c --- and hycom probably won't (i.e. i1st,j1st probably 0,0).
!c --- in near-global cases i1st is typically 1 but j1st<=0.
!c
      !call blkini(i1st,  'i1st  ')
      !call blkini(j1st,  'j1st  ')
      !i1st=1; j1st=1
      !using i1st=1,j1st=1 ==> ulat@90N,jmt=1099
      !this also checks out with tlat,ulat minmax values
      !produced by reading Zulemna's 1/12 deg regional.cice.r file

      i1st=i1st_in
      j1st=j1st_in

      imt=imt_in
      jmt=jmt_in
!c
!c --- 'imt   ' = 1st cice global array dimension
!c --- 'jmt   ' = 2nd cice global array dimension
!c
      !call blkini(imt,   'imt   ')
      !call blkini(jmt,   'jmt   ')
      !imt=idm;jmt=jdm-1
!c
      ii = idm
      jj = jdm
!c
      write(lp,'(/a,2i5 )') 'imt,jmt = ',imt,jmt
      write(lp,'( a,2i5 )') 'idm,jdm = ',ii, jj
      write(lp,'( a,2i5 )') 'i1, j1  = ',i1st,j1st
      write(lp,'( a,2i5/)') 'it, jt  = ',i1st+imt-1,j1st+jmt-1
      call zhflsh(lp)
!c
      if     (i1st+imt-1.gt.idm .or. &
              j1st+jmt-1.gt.jdm     ) then
        write(lp,*)
        write(lp,*) 'error - cice extent too large'
        write(lp,*)
        call zhflsh(lp)
        stop
      endif
!c
!c --- array allocation
!c
      call cice_alloc_grid
!c
!c     hycom horizontal grid
!c
      call zaiopf(trim(dirsrc)//'regional.grid.a', 'OLD', 21)
      call zaiord(plon,ip,.false., xmin,xmax, 21)
      call zaiord(plat,ip,.false., xmin,xmax, 21)
      call zaiord(qlon,ip,.false., xmin,xmax, 21)
      call zaiord(qlat,ip,.false., xmin,xmax, 21)
      call zaiosk(21)  !skip ulon
      call zaiosk(21)  !skip ulat
      call zaiosk(21)  !skip vlon
      call zaiosk(21)  !skip vlat
      call zaiord(pang,ip,.false., xmin,xmax, 21)
      call zaiord(pscx,ip,.false., xmin,xmax, 21)
      call zaiord(pscy,ip,.false., xmin,xmax, 21)
      call zaiocl(21)
!c
!c     hycom bathymetry
!c
      call zaiopf(trim(dirsrc)//'regional.depth.a', 'OLD', 22)
      call zaiord(depths,ip,.false., xmin,xmax, 22)
      call zaiocl(22)
!c
!c     cice sub-region:
!c        kmt    land mask array (0,1)
!c        ulati  latitude  of u-cell centers (radians)
!c        uloni  longitude of u-cell centers (radians)
!c        htn    length of northern edge of t-cell (m)
!c        hte    length of eastern  edge of t-cell (m)
!c        anglet conversion on t-cell between cice and lat-long grids (radians)
!c        tlati  latitude  of t-cell centers (radians)
!c        tloni  longitude of t-cell centers (radians)
!c
!c     HYCOM p-grid and CICE t-grid are co-located
!c     HYCOM q(2,2) is p(1.5,1.5)
!c     CICE  u(1,1) is t(1.5,1.5), i.e. HYCOM q(2,2)
!c
      deg2rad = (4.d0*atan(1.d0))/180.d0
      i0      = i1st - 1
      j0      = j1st - 1
      do j= 1,jmt
        do i = 1,imt
          if     (i+i0.ge.1 .and. j+j0.ge.1) then
!*           write(6,'(a,4i5)') 'i,ih,j,jh = ',i,i0+i,j,j0+j
            if   (depths(i+i0,j+j0).lt.2.0**99) then
              kmt(i,j) = 1.0  !sea
            else
              kmt(i,j) = 0.0  !land
            endif
            ip1 = min(i+i0+1,idm)
            jp1 = min(j+j0+1,jdm)
            qij         = mod(qlon(ip1,   jp1)   +720.d0,360.d0)
            if     (qij.gt. 180.0) then
              qij = qij - 360.0
            elseif (qij.lt.-180.0) then
              qij = qij + 360.0
            endif
            uloni(i,j)  =     qij                *deg2rad
            ulati(i,j)  =     qlat(ip1,   jp1)   *deg2rad
              htn(i,j)  =     pscx(i+i0,  jp1)    !m
              hte(i,j)  =     pscy(ip1,   j+j0)   !m
            anglet(i,j) =    -pang(i+i0,  j+j0)   !radians
!c           pang is from lon-lat to x-y, but anglet is the reverse
            qij         = mod(plon(i+i0,  j+j0)  +720.d0,360.d0)
            if     (qij.gt. 180.0) then
              qij = qij - 360.0
            elseif (qij.lt.-180.0) then
              qij = qij + 360.0
            endif
            tloni(i,j)  =     qij              *deg2rad
            tlati(i,j)  =     plat(i+i0,  j+j0)*deg2rad
          endif
        enddo !i
      enddo !j
!c
!c --- bottom boundary.
!c
      if     (j1st.le.0) then
        do j= 1-j1st,1,-1
          do i = 1,imt
               kmt(i,j) = 0.0
            anglet(i,j) = anglet(i,j+1)
             tloni(i,j) =  tloni(i,j+1)
             tlati(i,j) =  tlati(i,j+1) + (tlati(i,j+1)- &
                                           tlati(i,j+2) )
             uloni(i,j) =   uloni(i,j+1)
             ulati(i,j) =   ulati(i,j+1) + (ulati(i,j+1)- &
                                            ulati(i,j+2) )
               htn(i,j) =    htn(i,j+1)
               hte(i,j) =    hte(i,j+1)
          enddo !i
        enddo !j
      endif
!c
!c --- top boundary.
!c
      if     (j0+jmt.eq.jdm) then
        j = jmt
          do i = 1,imt
             uloni(i,j) =   uloni(i,j-1)
             ulati(i,j) =   ulati(i,j-1) + (ulati(i,j-1)- &
                                            ulati(i,j-2) )
               htn(i,j) =    htn(i,j-1)
               hte(i,j) =    hte(i,j-1)
          enddo !i
      endif
!c
!c --- west boundary.
!c
      if     (i1st.le.0) then
        do i= 1-i1st,1,-1
          do j= 1,jmt
               kmt(i,j) = 0.0
            anglet(i,j) = anglet(i+1,j)
             tlati(i,j) =  tlati(i+1,j)
             tloni(i,j) =  tloni(i+1,j) + (tloni(i+1,j)- &
                                           tloni(i+2,j) )  !may not work near 0E
             ulati(i,j) =  ulati(i+1,j)
             uloni(i,j) =  uloni(i+1,j) + (uloni(i+1,j)- &
                                           uloni(i+2,j) )  !may not work near 0E
               htn(i,j) =    htn(i+1,j)
               hte(i,j) =    hte(i+1,j)
          enddo !j
        enddo !i
      endif
!c
!c --- east boundary.
!c
      if     (i0+imt.eq.idm) then
        i = imt
          do j= 1,jmt
             ulati(i,j) =  ulati(i-1,j)
             uloni(i,j) =  uloni(i-1,j) + (uloni(i-1,j)- &
                                           uloni(i-2,j) )  !may not work near 0E
               htn(i,j) =    htn(i-1,j)
               hte(i,j) =    hte(i-1,j)
          enddo !j
      endif
!*c
!*c --- boundary always closed
!*c
!*      do i= 1,imt
!*        kmt(i,  1) = 0.0
!*        kmt(i,jmt) = 0.0
!*      enddo !i
!*      do j= 2,jmt-1
!*        kmt(  1,j) = 0.0
!*        kmt(imt,j) = 0.0
!*      enddo !j
!c
!c     printout first and last points
!c
      write(6,*) 
      write(6,*) '1st and last points:'
      write(6,*) ' kmt = ',   kmt(1,1),   kmt(imt,jmt)
      write(6,*) 'ulat = ', ulati(1,1), ulati(imt,jmt)
      write(6,*) 'ulon = ', uloni(1,1), uloni(imt,jmt)
      write(6,*) ' htn = ',   htn(1,1),   htn(imt,jmt)
      write(6,*) ' hte = ',   hte(1,1),   hte(imt,jmt)
      write(6,*) 'angt = ',anglet(1,1),anglet(imt,jmt)
      write(6,*) 'tlat = ', tlati(1,1), tlati(imt,jmt)
      write(6,*) 'tlon = ', tloni(1,1), tloni(imt,jmt)
      write(6,*)

!c     output cice grid
!c
      inquire(iolength=nrecl) kmt
      open(unit=31, file='regional.cice.r', & 
           form='unformatted', status='new', &
           access='direct', recl=nrecl, action='write')
      write(31,rec=1)    kmt
      write(31,rec=2)  ulati
      write(31,rec=3)  uloni
      write(31,rec=4)    htn
      write(31,rec=5)    hte
      write(31,rec=6) anglet
      write(31,rec=7)  tlati
      write(31,rec=8)  tloni
      close(31)
!c
      open(unit=32, file='regional.cice.txt', & 
           form='formatted', status='new', &
           access='sequential', action='write')
      rad2deg = 1.d0/deg2rad
      do j= 1,jmt
        do i= 1,imt
          write(32,'(2i5,2f12.6,f12.8)') &
            i,j,tloni(i,j)*rad2deg,tlati(i,j)*rad2deg,anglet(i,j)
        enddo !i
      enddo !j
      close(32)

      print *,nrecl,8*nrecl
      print *,imt,jmt
      print *,size(tlati,1),size(tlati,2)
      print *,size(ulati,1),size(ulati,2)
      print *, 'tlat = ', rad2deg*minval(tlati),rad2deg*maxval(tlati)
      print *, 'ulat = ', rad2deg*minval(ulati),rad2deg*maxval(ulati)
 
!c
      return
      end
#DECK icefields.F90
module icefields

  use param

  implicit none

  type IceFieldsDefs
    character(len=12)                           :: varname
    character(len=12)                           :: varunit
    character(len=60)                           :: varlong
    character(len=12)                           :: stagger
  end type IceFieldsDefs

  type(IceFieldsDefs) :: ifields(nvars_ice)

  contains

  subroutine icefields_setup

  integer :: i
  integer :: ii = 0

  ii = ii + 1
  ifields(ii)%varname     = 'tlat'
  ifields(ii)%varunit     = 'radians'
  ifields(ii)%varlong     = 'Latitude of T points'
  ifields(ii)%stagger     = 'center'

  ii = ii + 1
  ifields(ii)%varname     = 'tlon'
  ifields(ii)%varunit     = 'radians'
  ifields(ii)%varlong     = 'Longitude of T points'
  ifields(ii)%stagger     = 'center'

  ii = ii + 1
  ifields(ii)%varname     = 'ulat'
  ifields(ii)%varunit     = 'radians'
  ifields(ii)%varlong     = 'Latitude of U points'
  ifields(ii)%stagger     = 'corner'

  ii = ii + 1
  ifields(ii)%varname     = 'ulon'
  ifields(ii)%varunit     = 'radians'
  ifields(ii)%varlong     = 'Longitude of U points'
  ifields(ii)%stagger     = 'corner'

  ii = ii + 1
  ifields(ii)%varname     = 'htn'
  ifields(ii)%varunit     = 'cm'
  ifields(ii)%varlong     = 'Width of T cells on N side'
  ifields(ii)%stagger     = 'center'

  ii = ii + 1
  ifields(ii)%varname     = 'hte'
  ifields(ii)%varunit     = 'cm'
  ifields(ii)%varlong     = 'Width of T cells  on E side'
  ifields(ii)%stagger     = 'center'

  ii = ii + 1
  ifields(ii)%varname     = 'angle'
  ifields(ii)%varunit     = 'radians'
  ifields(ii)%varlong     = 'Rotation Angle  of U cells'
  ifields(ii)%stagger     = 'corner'

  if(ii .ne. nvars_ice)stop

 end subroutine icefields_setup
end module icefields
#DECK ocn_dump2cdf.F90
  subroutine ocn_dump2cdf

  use param
  use ocnfields
  use netcdf
  use charstrings
  use data
  use cdf

  implicit none

  !-----------------------------------------------------------------------------
  ! local variables
  !-----------------------------------------------------------------------------

            integer :: ii
  character(len=12) :: vname, vunit, stggr
  character(len=60) :: vlong
  character(len=60) :: outcdf

  !-----------------------------------------------------------------------------
  !
  !-----------------------------------------------------------------------------

  outcdf = trim(dirout)//trim(ocngridcdf)//'.nc'
  print *,'dumping values to ',trim(outcdf)

  rc = nf90_create(trim(outcdf), nf90_clobber, ncid)

  rc = nf90_def_dim(ncid, 'ni',   ihycom,    xdim)
  rc = nf90_def_dim(ncid, 'nj',   jhycom,    ydim)

  ! land+masks (ip,iq,iu,iv,land)
  do ii = 1,5
   vname = trim(ofields(ii)%varname)
   vunit = trim(ofields(ii)%varunit)
   vlong = trim(ofields(ii)%varlong)

    dim2(2) = ydim
    dim2(1) = xdim
   rc = nf90_def_var(ncid, vname,    nf90_int,  dim2,  datid)
   rc = nf90_put_att(ncid, datid,            'units',  vunit)
   rc = nf90_put_att(ncid, datid,        'long_name',  vlong)
  enddo

  do ii = 6,nvars_ocn
   vname = trim(ofields(ii)%varname)
   vunit = trim(ofields(ii)%varunit)
   vlong = trim(ofields(ii)%varlong)

    dim2(2) = ydim
    dim2(1) = xdim
    ! force single precision, 008 grid is too big for all variables
    rc = nf90_def_var(ncid, vname, nf90_float,  dim2,  datid)
    !rc = nf90_def_var(ncid, vname, nf90_double,  dim2,  datid)
    rc = nf90_put_att(ncid, datid,           'units',  vunit)
    rc = nf90_put_att(ncid, datid,       'long_name',  vlong)
  enddo
    rc = nf90_enddef(ncid)

    rc = nf90_inq_varid(ncid, trim('land'),    datid)
    rc = nf90_put_var(ncid,      datid,  int(land,4))

    rc = nf90_inq_varid(ncid,   trim('ip'),    datid)
    rc = nf90_put_var(ncid,      datid,    int(ip,4))
    rc = nf90_inq_varid(ncid,   trim('iq'),    datid)
    rc = nf90_put_var(ncid,      datid,    int(iq,4))
    rc = nf90_inq_varid(ncid,   trim('iu'),    datid)
    rc = nf90_put_var(ncid,      datid,    int(iu,4))
    rc = nf90_inq_varid(ncid,   trim('iv'),    datid)
    rc = nf90_put_var(ncid,      datid,    int(iv,4))

    rc = nf90_inq_varid(ncid,  trim('bathy'),    datid)
    rc = nf90_put_var(ncid,      datid, real(depths,4))

    rc = nf90_inq_varid(ncid,   trim('plon'),    datid)
    rc = nf90_put_var(ncid,      datid,   real(plon,4))
    rc = nf90_inq_varid(ncid,   trim('plat'),    datid)
    rc = nf90_put_var(ncid,      datid,   real(plat,4))

    rc = nf90_inq_varid(ncid,   trim('qlon'),    datid)
    rc = nf90_put_var(ncid,      datid,   real(qlon,4))
    rc = nf90_inq_varid(ncid,   trim('qlat'),    datid)
    rc = nf90_put_var(ncid,      datid,   real(qlat,4))

    rc = nf90_inq_varid(ncid,   trim('ulon'),    datid)
    rc = nf90_put_var(ncid,      datid,   real(ulon,4))
    rc = nf90_inq_varid(ncid,   trim('ulat'),    datid)
    rc = nf90_put_var(ncid,      datid,   real(ulat,4))

    rc = nf90_inq_varid(ncid,   trim('vlon'),    datid)
    rc = nf90_put_var(ncid,      datid,   real(vlon,4))
    rc = nf90_inq_varid(ncid,   trim('vlat'),    datid)
    rc = nf90_put_var(ncid,      datid,   real(vlat,4))

    rc = nf90_inq_varid(ncid,   trim('pscx'),    datid)
    rc = nf90_put_var(ncid,      datid,   real(pscx,4))
    rc = nf90_inq_varid(ncid,   trim('pscy'),    datid)
    rc = nf90_put_var(ncid,      datid,   real(pscy,4))

    rc = nf90_inq_varid(ncid,   trim('qscx'),    datid)
    rc = nf90_put_var(ncid,      datid,   real(qscx,4))
    rc = nf90_inq_varid(ncid,   trim('qscy'),    datid)
    rc = nf90_put_var(ncid,      datid,   real(qscy,4))

    rc = nf90_inq_varid(ncid,   trim('uscx'),    datid)
    rc = nf90_put_var(ncid,      datid,   real(uscx,4))
    rc = nf90_inq_varid(ncid,   trim('uscy'),    datid)
    rc = nf90_put_var(ncid,      datid,   real(uscy,4))

    rc = nf90_inq_varid(ncid,   trim('vscx'),    datid)
    rc = nf90_put_var(ncid,      datid,   real(vscx,4))
    rc = nf90_inq_varid(ncid,   trim('vscy'),    datid)
    rc = nf90_put_var(ncid,      datid,   real(vscy,4))

    rc = nf90_inq_varid(ncid,   trim('pang'),    datid)
    rc = nf90_put_var(ncid,      datid,   real(pang,4))
    rc = nf90_inq_varid(ncid,   trim('cori'),    datid)
    rc = nf90_put_var(ncid,      datid,   real(cori,4))
    rc = nf90_close(ncid)

  end subroutine ocn_dump2cdf
#DECK ocnfields.F90
module ocnfields

  use param

  implicit none

  type OcnFieldsDefs
    character(len=12)                           :: varname
    character(len=12)                           :: varunit
    character(len=60)                           :: varlong
    character(len=12)                           :: stagger
  end type OcnFieldsDefs

  type(OcnFieldsDefs) :: ofields(nvars_ocn)

  contains

  subroutine ocnfields_setup

  integer :: i
  integer :: ii = 0

  ii = ii + 1
  ofields(ii)%varname     = 'land'
  ofields(ii)%varunit     = ' '
  ofields(ii)%varlong     = 'land mask on p grid'
  ofields(ii)%stagger     = 'center'

  ii = ii + 1
  ofields(ii)%varname     = 'ip'
  ofields(ii)%varunit     = ' '
  ofields(ii)%varlong     = 'land mask on p grid'
  ofields(ii)%stagger     = 'center'

  ii = ii + 1
  ofields(ii)%varname     = 'iu'
  ofields(ii)%varunit     = ' '
  ofields(ii)%varlong     = 'land mask on u grid'
  ofields(ii)%stagger     = 'edge1'

  ii = ii + 1
  ofields(ii)%varname     = 'iv'
  ofields(ii)%varunit     = ' '
  ofields(ii)%varlong     = 'land mask on v grid'
  ofields(ii)%stagger     = 'edge2'

  ii = ii + 1
  ofields(ii)%varname     = 'iq'
  ofields(ii)%varunit     = ' '
  ofields(ii)%varlong     = 'land mask on q grid'
  ofields(ii)%stagger     = 'corner'

  ii = ii + 1
  ofields(ii)%varname     = 'bathy'
  ofields(ii)%varunit     = 'm'
  ofields(ii)%varlong     = 'bathymetry on p grid'
  ofields(ii)%stagger     = 'center'

  ii = ii + 1
  ofields(ii)%varname     = 'plat'
  ofields(ii)%varunit     = 'degree_north'
  ofields(ii)%varlong     = 'latitude of p grid'
  ofields(ii)%stagger     = 'center'

  ii = ii + 1
  ofields(ii)%varname     = 'plon'
  ofields(ii)%varunit     = 'degree_east'
  ofields(ii)%varlong     = 'longitude of p grid'
  ofields(ii)%stagger     = 'center'

  ii = ii + 1
  ofields(ii)%varname     = 'qlat'
  ofields(ii)%varunit     = 'degree_north'
  ofields(ii)%varlong     = 'latitude of q grid'
  ofields(ii)%stagger     = 'corner'

  ii = ii + 1
  ofields(ii)%varname     = 'qlon'
  ofields(ii)%varunit     = 'degree_east'
  ofields(ii)%varlong     = 'longitude of q grid'
  ofields(ii)%stagger     = 'corner'

  ii = ii + 1
  ofields(ii)%varname     = 'ulat'
  ofields(ii)%varunit     = 'degree_north'
  ofields(ii)%varlong     = 'latitude of u grid'
  ofields(ii)%stagger     = 'edge1'

  ii = ii + 1
  ofields(ii)%varname     = 'ulon'
  ofields(ii)%varunit     = 'degree_east'
  ofields(ii)%varlong     = 'longitude of u grid'
  ofields(ii)%stagger     = 'edge1'

  ii = ii + 1
  ofields(ii)%varname     = 'vlat'
  ofields(ii)%varunit     = 'degree_north'
  ofields(ii)%varlong     = 'latitude of v grid'
  ofields(ii)%stagger     = 'edge2'

  ii = ii + 1
  ofields(ii)%varname     = 'vlon'
  ofields(ii)%varunit     = 'degree_east'
  ofields(ii)%varlong     = 'longitude of v grid'
  ofields(ii)%stagger     = 'edge2'

  ii = ii + 1
  ofields(ii)%varname     = 'pscx'
  ofields(ii)%varunit     = 'm'
  ofields(ii)%varlong     = 'grid spacing x-direction on p grid'
  ofields(ii)%stagger     = 'center'

  ii = ii + 1
  ofields(ii)%varname     = 'pscy'
  ofields(ii)%varunit     = 'm'
  ofields(ii)%varlong     = 'grid spacing y-direction on p grid'
  ofields(ii)%stagger     = 'center'

  ii = ii + 1
  ofields(ii)%varname     = 'qscx'
  ofields(ii)%varunit     = 'm'
  ofields(ii)%varlong     = 'grid spacing x-direction on q grid'
  ofields(ii)%stagger     = 'corner'

  ii = ii + 1
  ofields(ii)%varname     = 'qscy'
  ofields(ii)%varunit     = 'm'
  ofields(ii)%varlong     = 'grid spacing y-direction on q grid'
  ofields(ii)%stagger     = 'corner'

  ii = ii + 1
  ofields(ii)%varname     = 'uscx'
  ofields(ii)%varunit     = 'm'
  ofields(ii)%varlong     = 'grid spacing x-direction on u grid'
  ofields(ii)%stagger     = 'edge1'

  ii = ii + 1
  ofields(ii)%varname     = 'uscy'
  ofields(ii)%varunit     = 'm'
  ofields(ii)%varlong     = 'grid spacing y-direction on u grid'
  ofields(ii)%stagger     = 'edge1'

  ii = ii + 1
  ofields(ii)%varname     = 'vscx'
  ofields(ii)%varunit     = 'm'
  ofields(ii)%varlong     = 'grid spacing x-direction on v grid'
  ofields(ii)%stagger     = 'edge2'

  ii = ii + 1
  ofields(ii)%varname     = 'vscy'
  ofields(ii)%varunit     = 'm'
  ofields(ii)%varlong     = 'grid spacing y-direction on v grid'
  ofields(ii)%stagger     = 'edge2'

  ii = ii + 1
  ofields(ii)%varname     = 'pang'
  ofields(ii)%varunit     = 'radians'
  ofields(ii)%varlong     = 'angle of p grid w/rt standard lat/lon'
  ofields(ii)%stagger     = 'center'

  ii = ii + 1
  ofields(ii)%varname     = 'cori'
  ofields(ii)%varunit     = 's-1'
  ofields(ii)%varlong     = 'coriolis parameter on q grid'
  ofields(ii)%stagger     = 'center'

  if(ii .ne. nvars_ocn)stop

 end subroutine ocnfields_setup
end module ocnfields
#DECK param.F90
module param

  implicit none
#ifdef hycom_024
  !Hycom 0.25 grid (tripole)
  integer, parameter ::  ihycom = 1500,  jhycom = 1100
#endif
#ifdef hycom_008
  !Hycom 1/12 grid (tripole)
  integer, parameter ::  ihycom = 4500,  jhycom = 3298
#endif
#ifdef hycom_072
  !Hycom 1/12 grid (tripole)
  integer, parameter ::  ihycom = 500,  jhycom = 382
#endif

  integer, parameter :: nvars_ocn =  1 &  !land
                                  +  4 &  !ip,iu,iv,iq
                                  +  1 &  !bathy
                                  + 18   

  integer, parameter :: nvars_ice =  4 &  !tlat,tlon,ulat,ulon
                                  +  2 &  !htn,hte
                                  +  1    !angle

end module param
#DECK xhygrid.F90
program xhygrid

  use param
  use cdf
  use data
  use ocnfields
  use icefields
  use charstrings

  use mod_za    ! HYCOM array I/O interface
  use mod_xc

  implicit none
 
     real :: xmin, xmax
  integer :: i,j,ii,jj,jlast
  integer :: reclen

  integer(kind=4), dimension(0:ihycom,0:jhycom) :: xip

  integer(kind=4), dimension(ihycom,jhycom) :: i2d
     real(kind=4), dimension(ihycom,jhycom) :: a2d

  call xcspmd
  call zaiost
  lp=6

  if(idm .ne. ihycom .or. jdm .ne. jhycom)stop
  ip = 1

  print *,idm,jdm
  !print *,ihycom,jhycom
  !inquire(iolength=reclen)a2d
  !print *,reclen,19*(reclen+2752),19*(reclen+11616)
  ! size of regional.depth.a (single record) is 6602752; 
  ! reclen=6600000; offset of some sort 2752
  ! size of regional.grid.a (19 records) is 125452288
  ! ==>19*(reclen+2752)
  ! for the 1/12 degree grid, regional.depth.a is 59375616
  ! reclen=59364000; offset of some sort 11616
  ! size of regional.grid.a (19 records) is 1128136704
  ! ==>19*(59364000+11616) 

  !-----------------------------------------------------------------------------
  ! set up the variable attributes for netcdf file
  !-----------------------------------------------------------------------------

  call ocnfields_setup
  
  call icefields_setup

  !-----------------------------------------------------------------------------
  ! read hycom horizontal grid
  !-----------------------------------------------------------------------------

  call zaiopf(trim(dirsrc)//'regional.grid.a', 'OLD', 21)

  ! lat/lon at P,Q,U,V grids
  call zaiord(plon,ip,.false., xmin,xmax, 21)
  call zaiord(plat,ip,.false., xmin,xmax, 21)

  call zaiord(qlon,ip,.false., xmin,xmax, 21)
  call zaiord(qlat,ip,.false., xmin,xmax, 21)

  call zaiord(ulon,ip,.false., xmin,xmax, 21)
  call zaiord(ulat,ip,.false., xmin,xmax, 21)

  call zaiord(vlon,ip,.false., xmin,xmax, 21)
  call zaiord(vlat,ip,.false., xmin,xmax, 21)
  ! angle between p grid and geolat,geolon
  call zaiord(pang,ip,.false., xmin,xmax, 21)

  ! grid spacing in meters of all 4 grids
  call zaiord(pscx,ip,.false., xmin,xmax, 21)
  call zaiord(pscy,ip,.false., xmin,xmax, 21)

  call zaiord(qscx,ip,.false., xmin,xmax, 21)
  call zaiord(qscy,ip,.false., xmin,xmax, 21)

  call zaiord(uscx,ip,.false., xmin,xmax, 21)
  call zaiord(uscy,ip,.false., xmin,xmax, 21)

  call zaiord(vscx,ip,.false., xmin,xmax, 21)
  call zaiord(vscy,ip,.false., xmin,xmax, 21)

  ! coriolis
  call zaiord(cori,ip,.false., xmin,xmax, 21)

  call zaiocl(21)
  print *,'closing regional.grid.a'

#ifdef test
  !-----------------------------------------------------------------------------
  ! print some values
  !-----------------------------------------------------------------------------

   !do i = 370,380
   do i = 1120,1130
    print *,i,qlat(i,jdm),qlon(i,jdm)
   enddo
   print *
   !do i = 1120,1130
   do i = 3370,3380
    print *,i,qlat(i,jdm),qlon(i,jdm)
   enddo

   i = 376; j = 1100
   print *,vlon(i,j),vlat(i,j)
   i = 1126; j = 1100
   print *,vlon(i,j),vlat(i,j)
#endif
  !-----------------------------------------------------------------------------
  ! read hycom bathymetry
  !-----------------------------------------------------------------------------

   call zaiopf(trim(dirsrc)//'regional.depth.a', 'OLD', 22)
   call zaiord(depths,ip,.false., xmin,xmax, 22)
   call zaiocl(22)
   print *,'closing regional.depth.a'

   print *,xmin,xmax
                          land = 1
   where(depths .gt. xmax)land = 0
   where(depths .gt. xmax)depths = 0.0

   !do i = 1,ihycom
   ! write(20,*)j,pang(i,1099),pang(i,1100)
   !enddo

  !-----------------------------------------------------------------------------
  ! make the masks
  !
  ! Following code from bigrid.f ln 216
  !c --- u,v points are located halfway between any 2 adjoining mass points
  !c --- 'interior' q points require water on all 4 sides.
  !c --- 'promontory' q points require water on 3 (or at least 2
  !c --- diametrically opposed) sides
  !-----------------------------------------------------------------------------

      xip = 0
       ip = 0; iu = 0; iv = 0; iq = 0
     do j = 1,jhycom
      do i = 1,ihycom
       if(depths(i,j) .gt. 0.)then
         ip(i,j) = 1
        xip(i,j) = 1
       endif
      enddo
     enddo
     ! set xip consistent w/ closed southern boundary, periodic eastern
     xip(:,0) = xip(:,1)
     xip(0,:) = xip(1,:)    

      do j=1,jhycom
        do i=1,ihycom
          if (xip(i-1,j).gt.0.and.xip(i,j).gt.0) then
            iu(i,j)=1
          endif
          if (xip(i,j-1).gt.0.and.xip(i,j).gt.0) then
            iv(i,j)=1
          endif
          if (min(xip(i,j),xip(i-1,j),xip(i,j-1),xip(i-1,j-1)).gt.0) then
            iq(i,j)=1
          elseif ((xip(i  ,j).gt.0.and.xip(i-1,j-1).gt.0).or. &
                  (xip(i-1,j).gt.0.and.xip(i  ,j-1).gt.0)    ) then
            iq(i,j)=1
          endif
        enddo
      enddo

  !-----------------------------------------------------------------------------
  ! straight dump of values
  !-----------------------------------------------------------------------------

  call ocn_dump2cdf

  !-----------------------------------------------------------------------------
  ! make the cice grid too
  !-----------------------------------------------------------------------------
 
  print *,'now making CICE grid'

  call grid2cice(1,1,ihycom,jhycom-1)

  !-----------------------------------------------------------------------------
  ! straight dump of values
  !-----------------------------------------------------------------------------

  !call ice_dump2cdf

end program XHygrid
